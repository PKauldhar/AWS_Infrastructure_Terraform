provider "aws" {
  region = var.aws_region
}

resource "aws_vpc" "example" {
  cidr_block = "10.0.0.0/16"
}



resource "aws_subnet" "public" {
  vpc_id     = aws_vpc.example.id
  cidr_block = var.publiccidr
  availability_zone = "eu-west-2a"
  tags = {
    Name = "public_subnet"
  }
}


resource "aws_subnet" "private" {
  vpc_id     = aws_vpc.example.id
  cidr_block = "10.0.2.0/24"
  availability_zone = "eu-west-2a"
  tags = {
    Name = "private_subnet"
  }
}




resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.example.id
}

resource "aws_route_table" "main" {
  vpc_id     = aws_vpc.example.id
  route{  
  cidr_block = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.gw.id
}
}

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.main.id
}







#elastic ip for natgw
#this all takes place in 1 vpc so it is true
#a private ip is specified for this 
resource "aws_eip" "elasticip_natgw" {

  vpc                       = true

  associate_with_private_ip = "10.0.1.0"

  depends_on                = ["aws_internet_gateway.gw"]

}



resource "aws_nat_gateway" "ngw" {

  allocation_id = aws_eip.elasticip_natgw.id

  subnet_id     = aws_subnet.public.id


  tags = {

    Name = "Natgw for private subnet in public subnet"

  }

  depends_on = ["aws_internet_gateway.gw"]

}






#private route table
resource "aws_route_table" "private-routetable" {
  vpc_id     = aws_vpc.example.id

route{

cidr_block = "0.0.0.0/0"
nat_gateway_id = aws_nat_gateway.ngw.id
}

tags = {
Name = "private subnet route table"
 }
}

resource "aws_route_table_association" "b" {
  subnet_id      = aws_subnet.private.id
  route_table_id = aws_route_table.private-routetable.id
}



resource "aws_security_group" "publicsg" {

  vpc_id = aws_vpc.example.id



  ingress {
   
    cidr_blocks = ["0.0.0.0/0"]

    protocol  = "tcp"

    from_port = 80

    to_port   = 80

  }

  ingress {

    protocol  = "tcp"

    cidr_blocks = ["0.0.0.0/0"]

    from_port = 22

    to_port   = 22

  }

  egress {

    from_port   = 0

    to_port     = 0

    protocol    = "-1"

    cidr_blocks = ["0.0.0.0/0"]

  }

}






resource "aws_security_group" "private_sec" {

  name ="private_sec"



  #only allows ssh from  internal IP addresses from that public range

  ingress {

    from_port   = 22

    to_port     = 22

    protocol    = "tcp"


    cidr_blocks = [var.publiccidr]

  }

    egress {

    from_port   = 0

    to_port     = 0

    protocol    = "-1"

    cidr_blocks = ["0.0.0.0/0"]

  }

}

resource "aws_instance" "public" {
  ami                         = var.ami
  instance_type               = "t2.micro"
  subnet_id                   = aws_subnet.public.id
  associate_public_ip_address = true  
  key_name                    = "MyKeyPair"
  vpc_security_group_ids = [aws_security_group.publicsg.id]
  tags = { Name = "publicinstance-terra" }

}



resource "aws_instance" "private" {
  ami                         = var.ami
  instance_type               = "t2.micro"
  subnet_id                   = aws_subnet.private.id
  key_name                    = "MyKeyPair"
  vpc_security_group_ids = [aws_security_group.private_sec.id]
  tags = { Name = "private" }

}
